#### Solr Cloud wit Zookeeper ensemble ####
###### Input Configuration parameters. In this section you can set input configuration parameters which you will beable to change later in reconfiguration########
application:
  configuration:
    input.solr-version: "4.6.0" ### Solr dist version
    input.solr-collections: ["testone"] ### Solr collections array. Can contain urls to collections archive 
    input.solr-shards-num: 2 ### Shard numbers
    input.solr-loglevel: "FINE" ### Solr log level
    input.solr-zookeeper-loglevel: "INFO"
    input.app-port: 8080 ### Solr port
    input.exhibitor-port: 8090 ### Exhibitor ui port
    input.solr-quantity: 4 ### Solr hosts numbers. 4 hosts used for 2-shard configration
    input.zookeeper-quantity: 3 ### Zookkeper hosts quantity
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-solr-dev-cookbooks-stable-55849ff.tar.gz" 
    input.operating-system: {image: "ubuntu-1204-precise-v20160516", identity: gce-user} ### image/identity pair for describing Operating system for the instance
    input.instance-size: "g1-small" ### EC2 instance type

# Binding section.
# Here we are bind main.workflow component on sumbmodules.
# This is a component binding section it mean interfaces in components [main.workflow, app]
# will be connected by pin names regardless of interface name

  bindings:
    - [solr, tomcat]
    - [solr, zookeeper]

# Application Interfaces binding section.
# Here we describe a interfaces with pins  and their bindings on  component's  interfaces.
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)

  interfaces:
    input:  ###Input values .That values can be changed after application launch.
      #solr inputs
      solr-version: "bind(solr#input.solr-version)" ### For example  value input.solr-version mapped on input.solr-version in component solr
      solr-collections: "bind(solr#input.solr-collections)"
      solr-shards-num: "bind(solr#input.solr-shards-num)"
      solr-loglevel: "bind(solr#input.solr-loglevel)"
      solr-zookeeper-loglevel: "bind(solr#input.solr-zookeeper-loglevel)"
      #tomcat inputs
      app-port: "bind(tomcat#input.app-port)"
      solr-quantity: "bind(tomcat#input.quantity)"
      recipe-url: "bind(solr#input.recipe-url)"
      operating-system: "bind(tomcat#input.operating-system, solr#input.operating-system)"
      instance-size: "bind(tomcat#input.instance-size)"
      #zookeeper inputs
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
      zookeeper-quantity: "bind(zookeeper#input.zookeeper-quantity)"
    solr-zoo: ### combined interface for actions/output pins
      solr-node: "bind(solr#result.solr-node)"
      solr-url: "bind(solr#result.solr-url)"
      solr-hosts: "bind(tomcat#tomcat.app-hosts)"
      solr-port: "bind(tomcat#tomcat.app-port)"
      solr-zoo-nodes: "bind(solr#result.solr-zoo-nodes)"
      zoo-ui: "bind(zookeeper#zoo.zoo-ui)"

####### Components definitions ########

  components:
### Solr Cloud contain main component called 'solr' and two subcomponents 'tomcat' and 'zookeeper'
    tomcat:
      type: reference.Submodule 
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          operating-system:
             type: configuration(map<string,object>)
          app-port:
             type: configuration(int)
             name: Tomcat listen port
          quantity:
             type: configuration(int)
             name: Appliction hosts quantity
          instance-size:
             type: configuration(string)
             name: EC2 instance type 
        tomcat:
          reconfigure: 
             type: receive-command(string java-opts)
             name: restart Tomcat with new JAVA_OPTS
          deploy-libs:
             type: receive-command(list<string> lib-uri)
             name: Lib deployment action
          deploy-war:
             type: receive-command(string uri, string path, object context-attrs, object context-nodes)
             name: Deploy war/jar action
          manage-service:
             type: receive-command(string service-action)
             name: Manage Service action
          app-hosts:
             type: publish-signal(list<string>)
             name: Application Hosts
          app-port:
             type: publish-signal(int)
             name: Application port

    zookeeper:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Zookeeper"
      interfaces:
        input:
          exhibitor-port:
             type: configuration(int)
             name: Exhibitor UI port 
          zookeeper-quantity:
             type: configuration(int)
             name: Zookkeper hosts quantity
        zoo:
          zoo-nodes:
             type: publish-signal(list<string>)
             name: Zoo hosts Private IPs
          zoo-ui:
             type: publish-signal(list<string>)
             name: Exhibitiors UI Urls

    solr:
      type: workflow.Instance ### http://docs.qubell.com/developer/workflow-instance.html
      interfaces:
        input: #### Contain pins with type: configuration().
          operating-system:
             type: configuration(map<string,object>)
          solr-version:
             type: configuration(string)
             name: Solr version
          solr-collections:
             type: configuration(list<string>)
             name: Solr collections
          solr-loglevel:
             type: configuration(string)
             name: Solr log level
          solr-zookeeper-loglevel:
             type: configuration(string)
             name: Zookeeper log level
          solr-shards-num:
             type: configuration(int)
             name: Solr shard numbers
          recipe-url:
             type: configuration(string)
             name: Cookbooks url
        zoo:
          zoo-nodes:
             type: consume-signal(list<string>)
             name: Zoo hosts Private IPs
        tomcat:
          app-hosts:
             type: consume-signal(list<string>)
             name: Application Hosts
          app-port:
             type: consume-signal(int)
             name: Application port
          manage-service:
             type: send-command(string service-action)
             name: Manage Service action
          reconfigure:
             type: send-command(string java-opts)
             name: restart Tomcat with new JAVA_OPTS
          deploy-libs:
             type: send-command(list<string> lib-uri)
             name: Lib deployment action
          deploy-war:
             type: send-command(string uri, string path, object context-attrs, object context-nodes)
             name: Deploy war/jar action
        result:
          solr-url:
             type: publish-signal(list<string>)
             name: Solr Urls
          solr-node:
             type: publish-signal(list<string>)
             name: Solr Hosts
          solr-zoo-nodes:
             type: publish-signal(string)
             name: Zookeper nodes
      required: [zoo, tomcat]
      configuration:
        configuration.triggers:
          input.solr-collections: manage-collection
          
        configuration.propagateStatus: [ manage-collection ]
        configuration.workflows:
          launch:
            steps:
              - get-env-props: ### After getting signals on all required interfaces we want to used them later 
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    props: result
              - provision-node: ### Here we using trick with provisioning on staticIps for getting App Server ips in default  role
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: "{$.operating-system.identity}"
                    retryCount: 0
                    staticIps: "{$.props.tomcat.app-hosts}"
              - reconfigure-tomcat: ### Reconfiguring Tomcat with new JAVA_OPTS for Solr installation 
                  action: tomcat.reconfigure
                  phase: reconfigure-tomcat
                  precedingPhases: [get-env-props]
                  parameters:
                    commandCallTimeout: 10 minutes
                    java-opts: "$${{JAVA_OPTS}} -DnumShards={$.solr-shards-num} -Dlog4j.configuration=file:///opt/solr/webapps/log4j.properties"
              - deploy-solr: ### Run recipe for extract Solr war
                  action: "chefrun"
                  phase: deploy-solr
                  precedingPhases: [ reconfigure-tomcat ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-solr]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      cookbook-qubell-solr:
                        port: "{$.props.tomcat.app-port}"
                        hostcontext: "solr"
                        version: "{$.solr-version}"
                        loglevel: "{$.solr-loglevel}"
                        zookeeper:
                          loglevel: "{$.solr-zookeeper-loglevel}"
                  output:
                    chefAttrs: chefState
              - create-collections: ### Create Solr collections in Zookeeper 
                  action: "chefrun"
                  phase: create-collections
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-solr::create_collection]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      cookbook-qubell-solr:
                        version: "{$.solr-version}"
                        port: "{$.props.tomcat.app-port}"
                        hostcontext: "solr"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          hosts: "{$.props.zoo.zoo-nodes}"
                  output:
                     chefAttrs1: chefState
              - deploy-libs: ### Deploy libs required for application
                  action: tomcat.deploy-libs
                  phase: deploy-libs
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    commandCallTimeout: 10 minutes
                    lib-uri: "{$.chefAttrs['*'][0]['cookbook-qubell-solr']['lib_uri']}"
              - deploy-war: ### Deploy Solr war in Tomcat
                  action: tomcat.deploy-war
                  phase: deploy-war
                  precedingPhases: [ deploy-libs ]
                  parameters:
                    commandCallTimeout: 10 minutes
                    uri: "file://{$.chefAttrs['*'][0]['cookbook-qubell-solr']['war_uri']}"
                    path: "/solr"
                    context-attrs: {
                      "docBase": "{$.chefAttrs['*'][0]['cookbook-qubell-solr']['war_uri']}",
                      "debug": "5",
                      "crossContext": "true",
                      "privileged": "true",
                      "allowLinking": "true"
                    }
                    context-nodes:
                      - Environment: {
                          "name": "solr/home",
                          "type": "java.lang.String",
                          "value": "/opt/solr/cores",
                          "override": "true"
                        }

            return: ### We want to see DemoSite and AdminPanel urls will be present on application dashboard
              solr-node:
                value: "{$.props.tomcat.app-hosts}"
              solr-url:
                value: "http://{$.props.tomcat.app-hosts}:{$.props.tomcat.app-port}/solr"
              solr-zoo-nodes:
                value: "{$.chefAttrs1['*'][0].['cookbook-qubell-solr']['zookeeper']['nodes']}"

          manage-collection: ### Additional workflow for changing collections  
            steps:
              - get-env-props: ### After getting signals on all required interfaces we want to used them later 
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    props: result
              - stop-service-tomcat:
                  action: tomcat.manage-service
                  precedingPhases: ["get-env-props"]
                  phase: stop-service-tomcat
                  parameters:
                    commandCallTimeout: 10 minutes
                    service-action: "stop"
              - delete-collection:
                  action: "chefrun"
                  phase: "delete-collection"
                  precedingPhases: ["stop-service-tomcat"]
                  parameters:
                    isSolo: true
                    roles: ["default"]
                    runList: ["recipe[cookbook-qubell-solr::delete_collection]"]
                    recipeUrl: "{$.recipe-url}"
              - create-collections:
                  action: "chefrun"
                  phase: create-collections
                  precedingPhases: ["delete-collection"]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-solr::create_collection]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      cookbook-qubell-solr:
                        version: "{$.solr-version}"
                        port: "{$.props.tomcat.app-port}"
                        hostcontext: "solr"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          hosts: "{$.props.zoo.zoo-nodes}"
              - start-service-tomcat:
                  action: tomcat.manage-service
                  phase: start-service-tomcat
                  precedingPhases: ["create-collections"]
                  parameters:
                    commandCallTimeout: 10 minutes
                    service-action: "start"
